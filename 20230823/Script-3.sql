-- select
select * from actor;
select * from customer;
select first_name, last_name, email from customer order by first_name, last_name desc;

-- distinct
create table t1 (
id serial not null primary key,
bcolor varchar,
fcolor varchar
);

INSERT
INTO T1(BCOLOR,FCOLOR)
VALUES
('red','red')
,('red','red')
,('red',NULL)
,(NULL,'red')
,('red','green')
,('red','blue')
,('green','red')
,('green','blue')
,('green','green')
,('blue','red')
,('blue','green')
,('blue','blue')
;

select * from t1;
select distinct bcolor from t1;

-- 필터링
select * from customer where first_name = 'Jamie' and last_name = 'Rice';
select * from payment where amount <= 1 or amount >= 8;

-- limit
select * from film order by film_id limit 10;
select * from film order by film_id limit 10 offset 0;
select * from film order by film_id limit 10 offset 10;
select * from film order by film_id limit 10 offset 20;
select * from film order by film_id limit 10 offset 30;

select * from film order by title fetch first row only;
select * from film order by film_id offset 10 rows fetch first 10 rows only;

-- 가장 큰 length 순으로 3 ~ 5등까지 출력하시오
select * from film order by length desc limit 3 offset 2;

-- in / or
select * from rental where customer_id in (1, 2, 3) order by return_date desc;
select * from rental where customer_id = 1 or customer_id = 2 or customer_id = 3 order by return_date desc;

-- not in
select * from rental where customer_id <> 1 and customer_id != 2 order by return_date desc;
select * from rental where customer_id not in (1, 2) order by return_date desc;

-- cast
select * from rental where cast(return_date as date) = '2005-05-27';
select * from rental where customer_id in (select customer_id from rental where cast(return_date as date) = '2005-05-27');

select first_name, last_name from customer where customer_id in (select customer_id from rental where cast(return_date as date) = '2005-05-27');
select first_name, last_name from customer where customer_id in (select customer_id from rental where customer_id in (1, 2, 3) order by return_date desc);

-- between
select * from payment limit 3;
select * from payment where amount between 8 and 9;
select * from payment where amount >= 8 and amount <= 9;
select * from payment where amount not between 8 and 9;
select * from payment where amount >= 8 or amount <= 9;

select * from payment where cast(payment_date as date) between '2007-02-07' and '2007-02-15';
select * from payment where to_char(payment_date, 'YYYY-MM-DD') between '2007-02-07' and '2007-02-15';

-- like
select * from customer where first_name like 'Jen%';
select * from customer where first_name like '%ny';
select * from customer where email like '%ko%';


create table contact (
	id int generated by default as identity,
	first_name varchar(50) not null,
	last_name varchar(50) not null,
	email varchar(255) not null,
	phone varchar(15),
	primary key(id)
);

insert into contact (first_name, last_name, email, phone)
values ('John', 'Doe', 'john@example.com', null),
('Lily', 'Bush', 'lily.bush@example.com', '111-111-1111');

select * from contact where phone = null;
select * from contact where phone is null;
select * from contact where phone is not null;

-- payment 테이블에서 amount 값이 가장 큰 고객의 customer_id를 중복없이 출력
select customer_id from payment order by amount desc, customer_id limit 1;

select distinct customer_id from payment where amount = (select amount from payment order by amount desc limit 1) order by customer_id;
select distinct customer_id from payment where amount = (select max(amount) from payment) order by customer_id; -- 성능 상 우위

-- email 추출
select * from customer where email like '%@%' and email not like '@%' and email not like '%@' order by customer_id;

-- inner join
select * from (select * from customer) a;

create table basket_a (
	id int primary key,
	fruit varchar(100) not null
);

create table basket_b (
	id int primary key,
	fruit varchar(100) not null
);

insert into basket_a values
(1, 'Apple'),
(2, 'Orange'),
(3, 'Banana'),
(4, 'Cucumber');

insert into basket_b values
(1, 'Orange'),
(2, 'Apple'),
(3, 'Watremelon'),
(4, 'Pear');

select * from basket_a;
select * from basket_b;

select * from basket_a a inner join basket_b b on b.fruit = a.fruit;
select b.id, a.fruit from basket_a a inner join basket_b b on b.fruit = a.fruit;
select * from basket_a a inner join basket_b b on b.id = a.id;

update basket_a set fruit = 'apple' where id = 1; -- 대소문자 구분
update basket_a set fruit = 'Apple' where id = 1;

select * from basket_a a, basket_b b where a.fruit = b.fruit;

select * from customer c inner join payment p on c.customer_id = p.customer_id where amount > 11 order by c.customer_id;
select * from customer c, payment p where c.customer_id = p.customer_id and amount > 11 order by c.customer_id desc;

select * from customer c inner join payment p on c.customer_id = p.customer_id where c.customer_id = 2 order by c.customer_id;
select c.customer_id, c.first_name, c.last_name, c.email, p.amount, p.payment_date
from customer c, payment p where c.customer_id = p.customer_id and c.customer_id = 2 order by c.customer_id;

select * from payment p inner join customer c on c.customer_id = p.customer_id
inner join staff s on s.staff_id = p.staff_id order by c.customer_id;
select c.customer_id, c.first_name, c.last_name, c.email, p.amount, p.payment_date
from customer c, payment p, staff s where c.customer_id = p.customer_id and s.staff_id = p.staff_id and c.customer_id = 2 order by c.customer_id;

-- left outer join
select * from payment p left join customer c on c.customer_id = p.customer_id;
select * from basket_a a left join basket_b b on b.fruit = a.fruit;

select * from payment p left join customer c on c.customer_id = p.customer_id order by c.customer_id;
select * from basket_a a left join basket_b b on b.fruit = a.fruit order by a.id;

-- right outer join
select * from customer c right join payment p on c.customer_id = p.customer_id order by c.customer_id;
select * from basket_a a right join basket_b b on b.fruit = a.fruit order by a.id;

-- self join
CREATE TABLE EMPLOYEE
(
EMPLOYEE_ID INT PRIMARY KEY
, FIRST_NAME VARCHAR (255) NOT NULL
, LAST_NAME VARCHAR (255) NOT NULL
, MANAGER_ID INT
, FOREIGN KEY (MANAGER_ID)
REFERENCES EMPLOYEE (EMPLOYEE_ID)
ON DELETE cascade -- 연동해서 같이 삭제
);

INSERT INTO EMPLOYEE (
EMPLOYEE_ID
, FIRST_NAME
, LAST_NAME
, MANAGER_ID
)
VALUES
(1, 'Windy', 'Hays', NULL),
(2, 'Ava', 'Christ', 1)
(3, 'Hassan', 'Conner', 1),
(4, 'Anna', 'Reeves', 2),
(5, 'Sau', 'Norman', 2),
(6, 'Kelsie', 'Hays', 3),
(7, 'Tory', 'Goff', 3),
(8, 'Salley', 'Lester', 3);

select * from employee;
update employee set manager_id = 1 where employee_id = 2;

-- 각 직원의 manager 이름, first_name, last_name을 출력
select e2.first_name, e2.last_name, e2.manager_id, e1.first_name, e1.last_name from employee e1 inner join employee e2 on e1.employee_id = e2.manager_id;
select e2.first_name || ' ' || e2.last_name as employee, e2.manager_id, e1.first_name || ' ' || e1.last_name as manager from employee e1 inner join employee e2 on e1.employee_id = e2.manager_id;

-- 상영 시간이 같은 영화들(제목 중복 X) 출력
select * from film f1 inner join film f2 on f1.film_id <> f2.film_id where f1.length = f2.length;

-- group by
select customer_id, sum(amount) amout_sum from payment group by customer_id order by sum(amount) desc;
select staff_id, count(payment_id) from payment p group by staff_id;
select customer_id, sum(amount) amout_sum from payment group by customer_id having sum(amount) > 200 order by sum(amount) desc;